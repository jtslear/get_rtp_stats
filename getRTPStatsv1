#!/usr/bin/perl

#
# getRTPStats - gather and graph RTP stats for the Mediant 1000 - ryanfrantz 3/5/2008
#

#
# The purpose of this script is to gather history on the number of channels in use on the Mediant 1000 SIP/PSTN gateway
# The number of active RTP sessions is directly related to the number of PRI channels in use
#

#
# This script has been copied, shredded, twisted, pulled, yanked, bashed
# together to be formed as a plugin for nagios
# release jskarbek 02/10/2010
#

use warnings;
use strict;

use Net::SNMP;
use RRDs;
use File::Basename;
use Getopt::Long;
use Switch;

#
# vars
#
my $time = time;
my $date = localtime( $time );
use vars qw($opt_h $opt_n $opt_k $opt_w $opt_c $opt_m $opt_C);
# gimme the OIDs to perform the lookups
# I've broken the base OIDs out for pedantic purposes (read internal documentation)
my $enterprisesOID = '1.3.6.1.4.1';
my $audioCodesOID = $enterprisesOID . '.' . '5003';
my $channelStatusEntryOID = $audioCodesOID . '.' . '9.10.1.4.1.1';
my $rtpActiveOID = $channelStatusEntryOID . '.' . '1';
my $numChannels = '72';	# there are technically 48 channels we need to iterate over, of which 2 are control channels (B-channels) and will _never_ be active
my $exitCode = 3;

#
# subs
#
sub createSNMPSession {

	# we need a host to query and a community string
	my $host = shift;
	my $community = shift;

	if ( ! $community ) {
		print localtime( $time ) . ": createSNMPSession(): Missing arguments!!\n";
		exit 1;
	}

	my ( $session, $error ) = Net::SNMP->session (
		-hostname  => $host,
		-community => $community,
	# 	-version   => 2,
	);

	if ( ! defined ( $session ) ) {
		print localtime( $time ) . ":" .  $host. ":" . $error . "\n";
		exit 1;
	}

	return $session;

} # end createSNMPSession()

sub getSNMPRequest {

	# getSNMPRequest() queries the SNMP agent for a given host
	# Returns:
	#  $requestStatus, $oid, $oidValue

	# we need the session object, host, OIDs to get, and a request type ('info' or 'usage')
	my ( $session, $host, $getOIDs, $requestType ) = @_;
	my $requestStatus = undef;	# set to undef to be safe...

	my $result = $session->get_request (
		-varbindlist => [ $getOIDs ]	# '-varbindlist' requires an arrayref as an argument
	);

	my ( $oid, $oidValue );	# the result contains the OID and it's value; use in the return statement

	if ( ! defined ( $result ) ) {
		print localtime( $time ) . ":" . $host . ": ERROR[RTP]: " . $session->error . "\n";	# debug
		$requestStatus = 'SNMP_NO_RESULT';
		return $requestStatus;
	} else {
		# $result is an arrayref whose key should be the full OID and whose value should be '0' (inactive) or '1' (active)
		# there should only be one key/value pair in the result (in the context of _this_ script, anyhow)
		foreach my $key ( keys %$result ) {
			#print "OID: $key => $result->{ $key }\n";	# debug
			$oid = $key;
			$oidValue = $result->{ $key };
			$requestStatus = 'SNMP_SUCCESS';
			return $requestStatus, $oid, $oidValue;
		} # end "foreach my $key ( keys %$result )..."
	}	# end "if ( ! defined ( $result ) )..."
}	# end getSNMPRequest()

sub getRTPStats {
	# expect a host and the $snmp session object ( from createSNMPSession() )...
	my ( $host, $session ) = @_;
	if ( ! $session ) {
		print localtime( $time ) . ": getRTPStats(): Missing \$session object!\n\n";
		exit 1;
	}
	my ( $requestStatus, $oid, $oidValue );	# the return values from getSNMPRequest()

	my $numActiveChannels = '0';	# count the number of active channels found
	for ( 1 .. $numChannels ) {	# from 1 through the max number of channels

		my $currentChannel = $_ - 1;	# the channels are zero-based
		my $channelActiveStatus = $rtpActiveOID . '.' . $currentChannel;
		#print "Channel: $channelActive\n";	# debug

		# call getSNMPRequest() to get usage data
		( $requestStatus, $oid, $oidValue ) = getSNMPRequest( $session, $host, $channelActiveStatus );

		# NOTE: no error handling here; we could miss active channels due to failed SNMP calls and not include them in the count!
		unless ( $requestStatus =~ /SNMP_NO_RESULT/ ) {
			#print "STATUS: $requestStatus OID: $oid VALUE: $oidValue\n";	# debug
			$numActiveChannels++ if $oidValue eq '1';
		}	# end "unless ( $requestStatus =~ /SNMP_NO_RESULT/ )..."

	}	# end "for (1 .. $numChannels )..."

	#print "\nACTIVE CHANNELS: $numActiveChannels\n\n";	# debug
	return $numActiveChannels;

}  # end getRTPStats()

#
# start me up!
#

# the following are the aurugments we'll be allowing
# I need more checks to make this complete

Getopt::Long::Configure('bundling');
GetOptions (
	"h=s" => \$opt_h, "hostname=s" => \$opt_h,
	"n=s" => \$opt_n, "hostname1=s" => \$opt_n,
	"k=s" => \$opt_k, "hostname2=s" => \$opt_k,
	"w=s" => \$opt_w, "warning=s"  => \$opt_w,
	"c=s" => \$opt_c, "critical=s" => \$opt_c,
	"m=s" => \$opt_m, "max=s" => \$opt_m,
	"C=s" => \$opt_C, "community=s" => \$opt_C,
);

sub print_usage {
	print "getRTPStats -h <HOSTNAME> -n <HOSTNAME1> -k <HOSTNAME2> -C <COMMUNITY> -c <CRITICAL> -w <WARNING> -m <MAX>\n";
	exit 2;
}

$opt_h = shift unless ($opt_h);
print_usage() unless ($opt_h);
my $host = $1 if ($opt_h =~ m/^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+|[a-zA-Z][-a-zA-Z0]+(\.[a-zA-Z][-a-zA-Z0]+)*)$/);
#print "\nh set: $opt_h $host\n";
print_usage($host) unless ($host);

$opt_n = shift unless ($opt_n);
print_usage() unless ($opt_n);
my $host1 = $1 if ($opt_n =~ m/^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+|[a-zA-Z][-a-zA-Z0]+(\.[a-zA-Z][-a-zA-Z0]+)*)$/);
#print "\nn set: $opt_n $host1\n";
print_usage($host1) unless ($host1);

$opt_k = shift unless ($opt_k);
print_usage() unless ($opt_k);
my $host2 = $1 if ($opt_k =~ m/^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+|[a-zA-Z][-a-zA-Z0]+(\.[a-zA-Z][-a-zA-Z0]+)*)$/);
#print "\nn set: $opt_k $host2\n";
print_usage($host2) unless ($host2);

($opt_c) || ($opt_c = shift) || ($opt_c = 30);
my $critical = $1 if ($opt_c =~ /([0-9]+)/);

($opt_w) || ($opt_w = shift) || ($opt_w = 20);
my $warning = $1 if ($opt_w =~ /([0-9]+)/);

($opt_m) || ($opt_m = shift) || ($opt_m = 1);
my $maxChannels = $1 if ($opt_m =~ /([0-9]+)/);

($opt_C) || ($opt_C = shift) || ($opt_C = "public");
my $community = $opt_C;

# create an SNMP session object
my $snmp = createSNMPSession( $host, $community );
# pass the object to getRTPStats(); NIC speed, MAC, description, in/out speed (bps)
my $channelsUsed = getRTPStats( $host, $snmp ); 
$snmp = createSNMPSession( $host1, $community );
my $channelsUsed1 = getRTPStats( $host1, $snmp );
$snmp = createSNMPSession( $host2, $community );
my $channelsUsed2 = getRTPStats( $host2, $snmp );
my $channelsUsedTotal = $channelsUsed2 + $channelsUsed1 + $channelsUsed;
# check and print the channelsUsed so we know the status
switch ($channelsUsed) {
	case { $channelsUsed > $opt_c }	{ 
		print "CRITICAL"; 
		$exitCode = 2;
	}
	case { $channelsUsed >= $opt_w } {
		print "WARNING"; 
		$exitCode = 1;
	}
	case { $channelsUsed <= $opt_w } {
		print "OK"; 
		$exitCode = 0;
	}
	else 	{ print "UNKNOWN"; }
}
# we'll print some things here for nagios to parse
print " Active Channels: $channelsUsedTotal |";
print "'" . uc( $host ) . "'=";	# debug
print $channelsUsed . ";$opt_w;$opt_c;;$opt_m";
print " '" . uc( $host1 ) . "'=";
print $channelsUsed1 . ";$opt_w;$opt_c;;$opt_m";
print " '" . uc( $host2 ) . "'=";
print $channelsUsed2 . ";$opt_w;$opt_c;;$opt_m";
$snmp->close;
print "\n";
exit $exitCode;

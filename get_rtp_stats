#!/usr/bin/ruby -w

require 'optparse'
require 'ostruct'
require 'ping'


class GetTheOptions
	def self.parse(args)

		script_version = "0.01"
		options = OpenStruct.new
		options.device_list = []
		options.community = "public" #default to a common community string
		options.warning = "0"
		options.critical = "0"
		options.exit_status = "3"
		options.maximum = "0"
		options.verbose = false

		opts = OptionParser.new do |opts|
			opts.banner = "Usage: #{opts.program_name} [options]"
			opts.on("-d x y z", "--device x y z", Array, "Input list of devices seperated by a comma") do |device|
				options.device_list = device
			end
			opts.on("-c N", "--critical N", "Specify crictal threshold") do |critical|
				options.critical = critical
			end
			opts.on("-w N", "--warning N", "Specify warning threshold") do |warning|
				options.warning = warning
			end
			opts.on("-m N", "--maximum N", "Specify max threshold") do |maximum|
				options.maximum = maximum
			end
			opts.on("-C String", "--community String", String, "Specify snmp community") do |community|
				options.community = community
			end
			opts.on("-V", "--verbose", "Run verbosely (debugging only)") do |verbose|
				options.verbose = verbose
			end
			opts.on("-v", "--version", "Prints Version of this script.") do
				puts "get_rtp_stats #{script_version}"
				exit
			end
			opts.on_tail("-h", "--help", "Show help message") do
				puts opts
				exit
			end
		end

		opts.parse!(args)
		options

	end
end

class IsHostUp
  def self.check(host)
    if Ping.pingecho(host,2)
      puts "Device #{host} is up"
      true
    else
      puts "Device #{host} is down"
      false
    end
  end
end


options = GetTheOptions.parse(ARGV)
puts options
options.device_list.each  do |device|
  IsHostUp.check(device)
end

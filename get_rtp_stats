#!/usr/bin/ruby

require 'optparse'
require 'ostruct'
require 'net/ping'
require 'rubygems'
require 'socket'
require 'snmp'

class GetTheOptions
  def self.parse(args)

    script_version = "0.01"
    options = OpenStruct.new
    options.device_list = []
    options.community = "public" # default to a common community string
    options.warning = "0"
    options.critical = "0"
    options.exit_status = "3"
    options.maximum = "0"
    options.verbose = false

    opts = OptionParser.new do |user_input|
      user_input.banner = "Usage: #{user_input.program_name} [options]"
      user_input.on("-d x y z", "--device x y z", Array, "Input list of devices seperated by a comma") do |device|
        options.device_list = device
      end
      user_input.on("-g String", "--graphite String", String, "Input hostname of the graphite server") do |graphite|
        options.graphite_server = graphite
      end
      user_input.on("-p Integer", "--port Integer", Integer, "Input port number for graphite instance") do |port|
        options.graphite_server_port = port
      end
      user_input.on("-C String", "--community String", String, "Specify snmp community") do |community|
        options.community = community
      end
      user_input.on("-v", "--verbose", "Run verbosely (debugging only)") do |verbose|
        $VERBOSE = true
      end
      user_input.on("-V", "--version", "Prints Version of this script.") do
        puts "get_rtp_stats #{script_version}"
        exit
      end
      user_input.on_tail("-h", "--help", "Show help message") do
        puts opts
        exit
      end
    end

    begin
      opts.parse!(args)
    rescue OptionParser::InvalidOption
      puts opts
      exit
    end
    options

  end
end

class DeviceInfo
  def initialize(name,community_auth)
    @name = name
    @community_auth = community_auth
  end

  def is_up?
    # For some strange reason, ruby cannot create ICMP packets w/o root
    # So lets check that the host is up AND http is listening
    # (specific to our environment!)
    Net::Ping::TCP.new(@name,80,2).ping?
  end

  def status_text
    "#{@name} is #{is_up?}"
  end

  def snmp_manager
    SNMP::Manager.new(:host => @name, :community => @community_auth)
  end

  def get_rtp_count
    rtp_active_count = 0
    begin
      snmp_manager.walk("1.3.6.1.4.1.5003.9.10.1.4.1.1.1") do |index|
        if index.to_s =~ /value=1/ 
          print_verbose("#{index}")
          rtp_active_count = rtp_active_count + 1
        end
      end
    rescue SNMP::RequestTimeout
      print_verbose("No snmp response from #{@name}")
    end
    rtp_active_count
  end
end

def print_verbose(input,options={})
  if $VERBOSE
    if options[:print_line] == false
      print input
    else
      puts input
    end
  end
end

def send_to_graphite(server,port,request)
  @graphite_server = server
  @graphite_port = port
  @message = request

  if $VERBOSE
    print_verbose("Not sending data to #{@graphite_server} while in verbose mode")
  else
    begin
      socket = TCPSocket.open(@graphite_server,@graphite_port)
      socket.write(request)
      socket.close
    rescue
      print_verbose("Send to #{@graphite_server} failure")
    end
  end
end

unless SNMP::MIB.import_supported? then
  puts "libsmi package required; yum install libsmi"
  exit
end

options = GetTheOptions.parse(ARGV)
print_verbose("Verbose option enabled")
current_time = Time.now.to_i
device_rtp_print = Array.new

current_rtp_session_count = 0

options.device_list.each do |item|
  device = DeviceInfo.new(item,options.community)
  if device.is_up? then
    print_verbose("#{item} is up")
    current_rtp_session_count = device.get_rtp_count
    if current_rtp_session_count then
      print_verbose("#{item} total: #{current_rtp_session_count}")
      device_rtp_print.push("rtp_stats.#{item}.rtp_active #{current_rtp_session_count} #{current_time}")
    else
      current_rtp_session_count = 0
    end
  else
    print_verbose("#{item} down, no SNMP manager created")
  end
  current_rtp_session_count = 0
end
request = device_rtp_print.join("\n") + "\n"
device_rtp_print.each do |item|
  puts item
end
send_to_graphite(options.graphite_server,options.graphite_server_port,request)

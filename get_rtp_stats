#!/usr/bin/ruby -w

require 'optparse'
require 'ostruct'
require 'net/ping'
require 'rubygems'
require 'snmp'


class GetTheOptions
  def self.parse(args)

    script_version = "0.01"
    options = OpenStruct.new
    options.device_list = []
    options.community = "public" # default to a common community string
    options.warning = "0"
    options.critical = "0"
    options.exit_status = "3"
    options.maximum = "0"
    options.verbose = false

    opts = OptionParser.new do |user_input|
      user_input.banner = "Usage: #{user_input.program_name} [options]"
      user_input.on("-d x y z", "--device x y z", Array, "Input list of devices seperated by a comma") do |device|
        options.device_list = device
      end
      user_input.on("-c N", "--critical N", "Specify crictal threshold") do |critical|
        options.critical = critical
      end
      user_input.on("-w N", "--warning N", "Specify warning threshold") do |warning|
        options.warning = warning
      end
      user_input.on("-m N", "--maximum N", "Specify max threshold") do |maximum|
        options.maximum = maximum
      end
      user_input.on("-C String", "--community String", String, "Specify snmp community") do |community|
        options.community = community
      end
      user_input.on("-V", "--verbose", "Run verbosely (debugging only)") do |verbose|
        options.verbose = verbose
      end
      user_input.on("-v", "--version", "Prints Version of this script.") do
        puts "get_rtp_stats #{script_version}"
        exit
      end
      user_input.on_tail("-h", "--help", "Show help message") do
        puts options
        exit
      end
    end

    opts.parse!(args)
    options

  end
end

class DeviceInfo
  def initialize(name)
   @name = name
  end

  def is_up?
    Net::Ping.new(@name).ping?
  end

  def status
    if is_up?
      "up"
    else
     "down"
    end
  end

  def status_text
    "#{@name} is #{status}"
  end
end

if SNMP::MIB.import_supported? then
  #puts "Import is supported.  Available MIBs include:"
  #mib_list = SNMP::MIB.list_imported
  #puts mib_list
else
  puts "libsmi package required; yum install libsmi"
  exit
end

options = GetTheOptions.parse(ARGV)
#puts options

options.device_list.each do |item|
  device = DeviceInfo.new(item)
  puts device.status_text
    #puts "Continuing to create SNMP manager"
    #manager = SNMP::Manager.open(:host => devices.name, :community => options.community, :mib_modules => "SNMPv2-SMI")
end

#!/usr/bin/ruby -w

require 'optparse'
require 'ostruct'
require 'net/ping'
require 'rubygems'
require 'snmp'

class GetTheOptions
  def self.parse(args)

    script_version = "0.01"
    options = OpenStruct.new
    options.device_list = []
    options.community = "public" # default to a common community string
    options.warning = "0"
    options.critical = "0"
    options.exit_status = "3"
    options.maximum = "0"
    options.verbose = false

    opts = OptionParser.new do |user_input|
      user_input.banner = "Usage: #{user_input.program_name} [options]"
      user_input.on("-d x y z", "--device x y z", Array, "Input list of devices seperated by a comma") do |device|
        options.device_list = device
      end
      user_input.on("-C String", "--community String", String, "Specify snmp community") do |community|
        options.community = community
      end
      user_input.on("-V", "--verbose", "Run verbosely (debugging only)") do |verbose|
        options.verbose = verbose
      end
      user_input.on("-v", "--version", "Prints Version of this script.") do
        puts "get_rtp_stats #{script_version}"
        exit
      end
      user_input.on_tail("-h", "--help", "Show help message") do
        puts opts
        exit
      end
    end

    opts.parse!(args)
    options

  end
end

class DeviceInfo
  def initialize(name,community_auth)
    @name = name
    @community_auth = community_auth
  end

  def is_up?
    # For some strange reason, ruby cannot create ICMP packets w/o root
    # So lets check that the host is up AND http is listening
    Net::Ping::TCP.new(@name,80,2).ping?
  end

  def status_text
                     "#{@name} is #{is_up?}"
  end

  def snmp_manager
    SNMP::Manager.new(:host => @name, :community => @community_auth)
  end

  def get_rtp_count
    rtp_interface = 0
    rtp_active_count = 0
    while rtp_interface <= 43
      begin
        rtp_status_result = snmp_manager.get_value("1.3.6.1.4.1.5003.9.10.1.4.1.1.1.#{rtp_interface}")
        if rtp_status_result == 1
          rtp_active_count += 1
        end
        rtp_interface += 1
      rescue SNMP::RequestTimeout
        rtp_interface = 44
      end
    end
    rtp_active_count
  end
end

unless SNMP::MIB.import_supported? then
  puts "libsmi package required; yum install libsmi"
  exit
end

options = GetTheOptions.parse(ARGV)
device_stats_table = Hash.new
current_time = Time.now

total_active_connections = 0

options.device_list.each do |item|
  device = DeviceInfo.new(item,options.community)
  if device.is_up? then
    current_rtp_session_count = device.get_rtp_count
    puts "rtp_stats.#{item} #{current_rtp_session_count} #{current_time.to_i}"
  else
    puts "#{item} down, no SNMP manager created"
  end
  total_active_connections += current_rtp_session_count
  current_rtp_session_count = 0
end
puts "rtp_stats.total #{total_active_connections} #{current_time.to_i}"
